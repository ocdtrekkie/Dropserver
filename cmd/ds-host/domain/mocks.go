// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/teleclimber/DropServer/cmd/ds-host/domain (interfaces: DBManagerI,MetricsI,SandboxI,SandboxManagerI,RouteHandler,CookieModel,SettingsModel,UserModel,UserInvitationModel,AppFilesModel,Validator,Views,DbConn,AppspaceMetaDB,AppspaceInfoModel,RouteModelV0,AppspaceRouteModels,StdInput,MigrationJobModel)

// Package domain is a generated GoMock package.
package domain

import (
	gomock "github.com/golang/mock/gomock"
	sqlx "github.com/jmoiron/sqlx"
	nulltypes "github.com/teleclimber/DropServer/internal/nulltypes"
	twine "github.com/teleclimber/DropServer/internal/twine"
	http "net/http"
	reflect "reflect"
	time "time"
)

// MockDBManagerI is a mock of DBManagerI interface
type MockDBManagerI struct {
	ctrl     *gomock.Controller
	recorder *MockDBManagerIMockRecorder
}

// MockDBManagerIMockRecorder is the mock recorder for MockDBManagerI
type MockDBManagerIMockRecorder struct {
	mock *MockDBManagerI
}

// NewMockDBManagerI creates a new mock instance
func NewMockDBManagerI(ctrl *gomock.Controller) *MockDBManagerI {
	mock := &MockDBManagerI{ctrl: ctrl}
	mock.recorder = &MockDBManagerIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDBManagerI) EXPECT() *MockDBManagerIMockRecorder {
	return m.recorder
}

// GetHandle mocks base method
func (m *MockDBManagerI) GetHandle() *DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHandle")
	ret0, _ := ret[0].(*DB)
	return ret0
}

// GetHandle indicates an expected call of GetHandle
func (mr *MockDBManagerIMockRecorder) GetHandle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHandle", reflect.TypeOf((*MockDBManagerI)(nil).GetHandle))
}

// GetSchema mocks base method
func (m *MockDBManagerI) GetSchema() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSchema")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSchema indicates an expected call of GetSchema
func (mr *MockDBManagerIMockRecorder) GetSchema() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchema", reflect.TypeOf((*MockDBManagerI)(nil).GetSchema))
}

// Open mocks base method
func (m *MockDBManagerI) Open() (*DB, Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open")
	ret0, _ := ret[0].(*DB)
	ret1, _ := ret[1].(Error)
	return ret0, ret1
}

// Open indicates an expected call of Open
func (mr *MockDBManagerIMockRecorder) Open() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockDBManagerI)(nil).Open))
}

// SetSchema mocks base method
func (m *MockDBManagerI) SetSchema(arg0 string) Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSchema", arg0)
	ret0, _ := ret[0].(Error)
	return ret0
}

// SetSchema indicates an expected call of SetSchema
func (mr *MockDBManagerIMockRecorder) SetSchema(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSchema", reflect.TypeOf((*MockDBManagerI)(nil).SetSchema), arg0)
}

// MockMetricsI is a mock of MetricsI interface
type MockMetricsI struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsIMockRecorder
}

// MockMetricsIMockRecorder is the mock recorder for MockMetricsI
type MockMetricsIMockRecorder struct {
	mock *MockMetricsI
}

// NewMockMetricsI creates a new mock instance
func NewMockMetricsI(ctrl *gomock.Controller) *MockMetricsI {
	mock := &MockMetricsI{ctrl: ctrl}
	mock.recorder = &MockMetricsIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMetricsI) EXPECT() *MockMetricsIMockRecorder {
	return m.recorder
}

// HostHandleReq mocks base method
func (m *MockMetricsI) HostHandleReq(arg0 time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HostHandleReq", arg0)
}

// HostHandleReq indicates an expected call of HostHandleReq
func (mr *MockMetricsIMockRecorder) HostHandleReq(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostHandleReq", reflect.TypeOf((*MockMetricsI)(nil).HostHandleReq), arg0)
}

// MockSandboxI is a mock of SandboxI interface
type MockSandboxI struct {
	ctrl     *gomock.Controller
	recorder *MockSandboxIMockRecorder
}

// MockSandboxIMockRecorder is the mock recorder for MockSandboxI
type MockSandboxIMockRecorder struct {
	mock *MockSandboxI
}

// NewMockSandboxI creates a new mock instance
func NewMockSandboxI(ctrl *gomock.Controller) *MockSandboxI {
	mock := &MockSandboxI{ctrl: ctrl}
	mock.recorder = &MockSandboxIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSandboxI) EXPECT() *MockSandboxIMockRecorder {
	return m.recorder
}

// ExecFn mocks base method
func (m *MockSandboxI) ExecFn(arg0 AppspaceRouteHandler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecFn", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecFn indicates an expected call of ExecFn
func (mr *MockSandboxIMockRecorder) ExecFn(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecFn", reflect.TypeOf((*MockSandboxI)(nil).ExecFn), arg0)
}

// GetTransport mocks base method
func (m *MockSandboxI) GetTransport() http.RoundTripper {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransport")
	ret0, _ := ret[0].(http.RoundTripper)
	return ret0
}

// GetTransport indicates an expected call of GetTransport
func (mr *MockSandboxIMockRecorder) GetTransport() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransport", reflect.TypeOf((*MockSandboxI)(nil).GetTransport))
}

// ID mocks base method
func (m *MockSandboxI) ID() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(int)
	return ret0
}

// ID indicates an expected call of ID
func (mr *MockSandboxIMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockSandboxI)(nil).ID))
}

// LastActive mocks base method
func (m *MockSandboxI) LastActive() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastActive")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// LastActive indicates an expected call of LastActive
func (mr *MockSandboxIMockRecorder) LastActive() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastActive", reflect.TypeOf((*MockSandboxI)(nil).LastActive))
}

// SendMessage mocks base method
func (m *MockSandboxI) SendMessage(arg0, arg1 int, arg2 []byte) (twine.SentMessageI, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", arg0, arg1, arg2)
	ret0, _ := ret[0].(twine.SentMessageI)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMessage indicates an expected call of SendMessage
func (mr *MockSandboxIMockRecorder) SendMessage(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockSandboxI)(nil).SendMessage), arg0, arg1, arg2)
}

// SetStatus mocks base method
func (m *MockSandboxI) SetStatus(arg0 SandboxStatus) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStatus", arg0)
}

// SetStatus indicates an expected call of SetStatus
func (mr *MockSandboxIMockRecorder) SetStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatus", reflect.TypeOf((*MockSandboxI)(nil).SetStatus), arg0)
}

// Start mocks base method
func (m *MockSandboxI) Start(arg0 *AppVersion, arg1 *Appspace) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockSandboxIMockRecorder) Start(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockSandboxI)(nil).Start), arg0, arg1)
}

// Status mocks base method
func (m *MockSandboxI) Status() SandboxStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(SandboxStatus)
	return ret0
}

// Status indicates an expected call of Status
func (mr *MockSandboxIMockRecorder) Status() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockSandboxI)(nil).Status))
}

// Stop mocks base method
func (m *MockSandboxI) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop
func (mr *MockSandboxIMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockSandboxI)(nil).Stop))
}

// TaskBegin mocks base method
func (m *MockSandboxI) TaskBegin() chan bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TaskBegin")
	ret0, _ := ret[0].(chan bool)
	return ret0
}

// TaskBegin indicates an expected call of TaskBegin
func (mr *MockSandboxIMockRecorder) TaskBegin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TaskBegin", reflect.TypeOf((*MockSandboxI)(nil).TaskBegin))
}

// TiedUp mocks base method
func (m *MockSandboxI) TiedUp() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TiedUp")
	ret0, _ := ret[0].(bool)
	return ret0
}

// TiedUp indicates an expected call of TiedUp
func (mr *MockSandboxIMockRecorder) TiedUp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TiedUp", reflect.TypeOf((*MockSandboxI)(nil).TiedUp))
}

// WaitFor mocks base method
func (m *MockSandboxI) WaitFor(arg0 SandboxStatus) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WaitFor", arg0)
}

// WaitFor indicates an expected call of WaitFor
func (mr *MockSandboxIMockRecorder) WaitFor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitFor", reflect.TypeOf((*MockSandboxI)(nil).WaitFor), arg0)
}

// MockSandboxManagerI is a mock of SandboxManagerI interface
type MockSandboxManagerI struct {
	ctrl     *gomock.Controller
	recorder *MockSandboxManagerIMockRecorder
}

// MockSandboxManagerIMockRecorder is the mock recorder for MockSandboxManagerI
type MockSandboxManagerIMockRecorder struct {
	mock *MockSandboxManagerI
}

// NewMockSandboxManagerI creates a new mock instance
func NewMockSandboxManagerI(ctrl *gomock.Controller) *MockSandboxManagerI {
	mock := &MockSandboxManagerI{ctrl: ctrl}
	mock.recorder = &MockSandboxManagerIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSandboxManagerI) EXPECT() *MockSandboxManagerIMockRecorder {
	return m.recorder
}

// GetForAppSpace mocks base method
func (m *MockSandboxManagerI) GetForAppSpace(arg0 *AppVersion, arg1 *Appspace) chan SandboxI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetForAppSpace", arg0, arg1)
	ret0, _ := ret[0].(chan SandboxI)
	return ret0
}

// GetForAppSpace indicates an expected call of GetForAppSpace
func (mr *MockSandboxManagerIMockRecorder) GetForAppSpace(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetForAppSpace", reflect.TypeOf((*MockSandboxManagerI)(nil).GetForAppSpace), arg0, arg1)
}

// StopAppspace mocks base method
func (m *MockSandboxManagerI) StopAppspace(arg0 AppspaceID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StopAppspace", arg0)
}

// StopAppspace indicates an expected call of StopAppspace
func (mr *MockSandboxManagerIMockRecorder) StopAppspace(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopAppspace", reflect.TypeOf((*MockSandboxManagerI)(nil).StopAppspace), arg0)
}

// MockRouteHandler is a mock of RouteHandler interface
type MockRouteHandler struct {
	ctrl     *gomock.Controller
	recorder *MockRouteHandlerMockRecorder
}

// MockRouteHandlerMockRecorder is the mock recorder for MockRouteHandler
type MockRouteHandlerMockRecorder struct {
	mock *MockRouteHandler
}

// NewMockRouteHandler creates a new mock instance
func NewMockRouteHandler(ctrl *gomock.Controller) *MockRouteHandler {
	mock := &MockRouteHandler{ctrl: ctrl}
	mock.recorder = &MockRouteHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRouteHandler) EXPECT() *MockRouteHandlerMockRecorder {
	return m.recorder
}

// ServeHTTP mocks base method
func (m *MockRouteHandler) ServeHTTP(arg0 http.ResponseWriter, arg1 *http.Request, arg2 *AppspaceRouteData) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ServeHTTP", arg0, arg1, arg2)
}

// ServeHTTP indicates an expected call of ServeHTTP
func (mr *MockRouteHandlerMockRecorder) ServeHTTP(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServeHTTP", reflect.TypeOf((*MockRouteHandler)(nil).ServeHTTP), arg0, arg1, arg2)
}

// MockCookieModel is a mock of CookieModel interface
type MockCookieModel struct {
	ctrl     *gomock.Controller
	recorder *MockCookieModelMockRecorder
}

// MockCookieModelMockRecorder is the mock recorder for MockCookieModel
type MockCookieModelMockRecorder struct {
	mock *MockCookieModel
}

// NewMockCookieModel creates a new mock instance
func NewMockCookieModel(ctrl *gomock.Controller) *MockCookieModel {
	mock := &MockCookieModel{ctrl: ctrl}
	mock.recorder = &MockCookieModelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCookieModel) EXPECT() *MockCookieModelMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockCookieModel) Create(arg0 Cookie) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockCookieModelMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCookieModel)(nil).Create), arg0)
}

// Delete mocks base method
func (m *MockCookieModel) Delete(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockCookieModelMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCookieModel)(nil).Delete), arg0)
}

// Get mocks base method
func (m *MockCookieModel) Get(arg0 string) (*Cookie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*Cookie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockCookieModelMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCookieModel)(nil).Get), arg0)
}

// PrepareStatements mocks base method
func (m *MockCookieModel) PrepareStatements() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PrepareStatements")
}

// PrepareStatements indicates an expected call of PrepareStatements
func (mr *MockCookieModelMockRecorder) PrepareStatements() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareStatements", reflect.TypeOf((*MockCookieModel)(nil).PrepareStatements))
}

// UpdateExpires mocks base method
func (m *MockCookieModel) UpdateExpires(arg0 string, arg1 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExpires", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateExpires indicates an expected call of UpdateExpires
func (mr *MockCookieModelMockRecorder) UpdateExpires(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExpires", reflect.TypeOf((*MockCookieModel)(nil).UpdateExpires), arg0, arg1)
}

// MockSettingsModel is a mock of SettingsModel interface
type MockSettingsModel struct {
	ctrl     *gomock.Controller
	recorder *MockSettingsModelMockRecorder
}

// MockSettingsModelMockRecorder is the mock recorder for MockSettingsModel
type MockSettingsModelMockRecorder struct {
	mock *MockSettingsModel
}

// NewMockSettingsModel creates a new mock instance
func NewMockSettingsModel(ctrl *gomock.Controller) *MockSettingsModel {
	mock := &MockSettingsModel{ctrl: ctrl}
	mock.recorder = &MockSettingsModelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSettingsModel) EXPECT() *MockSettingsModelMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockSettingsModel) Get() (*Settings, Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].(*Settings)
	ret1, _ := ret[1].(Error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockSettingsModelMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSettingsModel)(nil).Get))
}

// Set mocks base method
func (m *MockSettingsModel) Set(arg0 *Settings) Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0)
	ret0, _ := ret[0].(Error)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockSettingsModelMockRecorder) Set(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockSettingsModel)(nil).Set), arg0)
}

// SetRegistrationOpen mocks base method
func (m *MockSettingsModel) SetRegistrationOpen(arg0 bool) Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRegistrationOpen", arg0)
	ret0, _ := ret[0].(Error)
	return ret0
}

// SetRegistrationOpen indicates an expected call of SetRegistrationOpen
func (mr *MockSettingsModelMockRecorder) SetRegistrationOpen(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRegistrationOpen", reflect.TypeOf((*MockSettingsModel)(nil).SetRegistrationOpen), arg0)
}

// MockUserModel is a mock of UserModel interface
type MockUserModel struct {
	ctrl     *gomock.Controller
	recorder *MockUserModelMockRecorder
}

// MockUserModelMockRecorder is the mock recorder for MockUserModel
type MockUserModelMockRecorder struct {
	mock *MockUserModel
}

// NewMockUserModel creates a new mock instance
func NewMockUserModel(ctrl *gomock.Controller) *MockUserModel {
	mock := &MockUserModel{ctrl: ctrl}
	mock.recorder = &MockUserModelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserModel) EXPECT() *MockUserModelMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockUserModel) Create(arg0, arg1 string) (*User, Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(Error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockUserModelMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserModel)(nil).Create), arg0, arg1)
}

// DeleteAdmin mocks base method
func (m *MockUserModel) DeleteAdmin(arg0 UserID) Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAdmin", arg0)
	ret0, _ := ret[0].(Error)
	return ret0
}

// DeleteAdmin indicates an expected call of DeleteAdmin
func (mr *MockUserModelMockRecorder) DeleteAdmin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAdmin", reflect.TypeOf((*MockUserModel)(nil).DeleteAdmin), arg0)
}

// GetAll mocks base method
func (m *MockUserModel) GetAll() ([]*User, Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*User)
	ret1, _ := ret[1].(Error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockUserModelMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockUserModel)(nil).GetAll))
}

// GetAllAdmins mocks base method
func (m *MockUserModel) GetAllAdmins() ([]UserID, Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAdmins")
	ret0, _ := ret[0].([]UserID)
	ret1, _ := ret[1].(Error)
	return ret0, ret1
}

// GetAllAdmins indicates an expected call of GetAllAdmins
func (mr *MockUserModelMockRecorder) GetAllAdmins() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAdmins", reflect.TypeOf((*MockUserModel)(nil).GetAllAdmins))
}

// GetFromEmail mocks base method
func (m *MockUserModel) GetFromEmail(arg0 string) (*User, Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFromEmail", arg0)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(Error)
	return ret0, ret1
}

// GetFromEmail indicates an expected call of GetFromEmail
func (mr *MockUserModelMockRecorder) GetFromEmail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFromEmail", reflect.TypeOf((*MockUserModel)(nil).GetFromEmail), arg0)
}

// GetFromEmailPassword mocks base method
func (m *MockUserModel) GetFromEmailPassword(arg0, arg1 string) (*User, Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFromEmailPassword", arg0, arg1)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(Error)
	return ret0, ret1
}

// GetFromEmailPassword indicates an expected call of GetFromEmailPassword
func (mr *MockUserModelMockRecorder) GetFromEmailPassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFromEmailPassword", reflect.TypeOf((*MockUserModel)(nil).GetFromEmailPassword), arg0, arg1)
}

// GetFromID mocks base method
func (m *MockUserModel) GetFromID(arg0 UserID) (*User, Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFromID", arg0)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(Error)
	return ret0, ret1
}

// GetFromID indicates an expected call of GetFromID
func (mr *MockUserModelMockRecorder) GetFromID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFromID", reflect.TypeOf((*MockUserModel)(nil).GetFromID), arg0)
}

// IsAdmin mocks base method
func (m *MockUserModel) IsAdmin(arg0 UserID) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAdmin", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAdmin indicates an expected call of IsAdmin
func (mr *MockUserModelMockRecorder) IsAdmin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAdmin", reflect.TypeOf((*MockUserModel)(nil).IsAdmin), arg0)
}

// MakeAdmin mocks base method
func (m *MockUserModel) MakeAdmin(arg0 UserID) Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeAdmin", arg0)
	ret0, _ := ret[0].(Error)
	return ret0
}

// MakeAdmin indicates an expected call of MakeAdmin
func (mr *MockUserModelMockRecorder) MakeAdmin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeAdmin", reflect.TypeOf((*MockUserModel)(nil).MakeAdmin), arg0)
}

// PrepareStatements mocks base method
func (m *MockUserModel) PrepareStatements() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PrepareStatements")
}

// PrepareStatements indicates an expected call of PrepareStatements
func (mr *MockUserModelMockRecorder) PrepareStatements() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareStatements", reflect.TypeOf((*MockUserModel)(nil).PrepareStatements))
}

// UpdatePassword mocks base method
func (m *MockUserModel) UpdatePassword(arg0 UserID, arg1 string) Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", arg0, arg1)
	ret0, _ := ret[0].(Error)
	return ret0
}

// UpdatePassword indicates an expected call of UpdatePassword
func (mr *MockUserModelMockRecorder) UpdatePassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockUserModel)(nil).UpdatePassword), arg0, arg1)
}

// MockUserInvitationModel is a mock of UserInvitationModel interface
type MockUserInvitationModel struct {
	ctrl     *gomock.Controller
	recorder *MockUserInvitationModelMockRecorder
}

// MockUserInvitationModelMockRecorder is the mock recorder for MockUserInvitationModel
type MockUserInvitationModelMockRecorder struct {
	mock *MockUserInvitationModel
}

// NewMockUserInvitationModel creates a new mock instance
func NewMockUserInvitationModel(ctrl *gomock.Controller) *MockUserInvitationModel {
	mock := &MockUserInvitationModel{ctrl: ctrl}
	mock.recorder = &MockUserInvitationModelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserInvitationModel) EXPECT() *MockUserInvitationModelMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockUserInvitationModel) Create(arg0 string) Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(Error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockUserInvitationModelMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserInvitationModel)(nil).Create), arg0)
}

// Delete mocks base method
func (m *MockUserInvitationModel) Delete(arg0 string) Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(Error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockUserInvitationModelMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserInvitationModel)(nil).Delete), arg0)
}

// Get mocks base method
func (m *MockUserInvitationModel) Get(arg0 string) (*UserInvitation, Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*UserInvitation)
	ret1, _ := ret[1].(Error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockUserInvitationModelMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUserInvitationModel)(nil).Get), arg0)
}

// GetAll mocks base method
func (m *MockUserInvitationModel) GetAll() ([]*UserInvitation, Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*UserInvitation)
	ret1, _ := ret[1].(Error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockUserInvitationModelMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockUserInvitationModel)(nil).GetAll))
}

// PrepareStatements mocks base method
func (m *MockUserInvitationModel) PrepareStatements() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PrepareStatements")
}

// PrepareStatements indicates an expected call of PrepareStatements
func (mr *MockUserInvitationModelMockRecorder) PrepareStatements() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareStatements", reflect.TypeOf((*MockUserInvitationModel)(nil).PrepareStatements))
}

// MockAppFilesModel is a mock of AppFilesModel interface
type MockAppFilesModel struct {
	ctrl     *gomock.Controller
	recorder *MockAppFilesModelMockRecorder
}

// MockAppFilesModelMockRecorder is the mock recorder for MockAppFilesModel
type MockAppFilesModelMockRecorder struct {
	mock *MockAppFilesModel
}

// NewMockAppFilesModel creates a new mock instance
func NewMockAppFilesModel(ctrl *gomock.Controller) *MockAppFilesModel {
	mock := &MockAppFilesModel{ctrl: ctrl}
	mock.recorder = &MockAppFilesModelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAppFilesModel) EXPECT() *MockAppFilesModelMockRecorder {
	return m.recorder
}

// Delete mocks base method
func (m *MockAppFilesModel) Delete(arg0 string) Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(Error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockAppFilesModelMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAppFilesModel)(nil).Delete), arg0)
}

// ReadMeta mocks base method
func (m *MockAppFilesModel) ReadMeta(arg0 string) (*AppFilesMetadata, Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadMeta", arg0)
	ret0, _ := ret[0].(*AppFilesMetadata)
	ret1, _ := ret[1].(Error)
	return ret0, ret1
}

// ReadMeta indicates an expected call of ReadMeta
func (mr *MockAppFilesModelMockRecorder) ReadMeta(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMeta", reflect.TypeOf((*MockAppFilesModel)(nil).ReadMeta), arg0)
}

// Save mocks base method
func (m *MockAppFilesModel) Save(arg0 *map[string][]byte) (string, Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(Error)
	return ret0, ret1
}

// Save indicates an expected call of Save
func (mr *MockAppFilesModelMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockAppFilesModel)(nil).Save), arg0)
}

// MockValidator is a mock of Validator interface
type MockValidator struct {
	ctrl     *gomock.Controller
	recorder *MockValidatorMockRecorder
}

// MockValidatorMockRecorder is the mock recorder for MockValidator
type MockValidatorMockRecorder struct {
	mock *MockValidator
}

// NewMockValidator creates a new mock instance
func NewMockValidator(ctrl *gomock.Controller) *MockValidator {
	mock := &MockValidator{ctrl: ctrl}
	mock.recorder = &MockValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockValidator) EXPECT() *MockValidatorMockRecorder {
	return m.recorder
}

// DBName mocks base method
func (m *MockValidator) DBName(arg0 string) Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DBName", arg0)
	ret0, _ := ret[0].(Error)
	return ret0
}

// DBName indicates an expected call of DBName
func (mr *MockValidatorMockRecorder) DBName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DBName", reflect.TypeOf((*MockValidator)(nil).DBName), arg0)
}

// Email mocks base method
func (m *MockValidator) Email(arg0 string) Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Email", arg0)
	ret0, _ := ret[0].(Error)
	return ret0
}

// Email indicates an expected call of Email
func (mr *MockValidatorMockRecorder) Email(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Email", reflect.TypeOf((*MockValidator)(nil).Email), arg0)
}

// Init mocks base method
func (m *MockValidator) Init() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Init")
}

// Init indicates an expected call of Init
func (mr *MockValidatorMockRecorder) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockValidator)(nil).Init))
}

// Password mocks base method
func (m *MockValidator) Password(arg0 string) Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Password", arg0)
	ret0, _ := ret[0].(Error)
	return ret0
}

// Password indicates an expected call of Password
func (mr *MockValidatorMockRecorder) Password(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Password", reflect.TypeOf((*MockValidator)(nil).Password), arg0)
}

// MockViews is a mock of Views interface
type MockViews struct {
	ctrl     *gomock.Controller
	recorder *MockViewsMockRecorder
}

// MockViewsMockRecorder is the mock recorder for MockViews
type MockViewsMockRecorder struct {
	mock *MockViews
}

// NewMockViews creates a new mock instance
func NewMockViews(ctrl *gomock.Controller) *MockViews {
	mock := &MockViews{ctrl: ctrl}
	mock.recorder = &MockViewsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockViews) EXPECT() *MockViewsMockRecorder {
	return m.recorder
}

// Admin mocks base method
func (m *MockViews) Admin(arg0 http.ResponseWriter) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Admin", arg0)
}

// Admin indicates an expected call of Admin
func (mr *MockViewsMockRecorder) Admin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Admin", reflect.TypeOf((*MockViews)(nil).Admin), arg0)
}

// AppspaceLogin mocks base method
func (m *MockViews) AppspaceLogin(arg0 http.ResponseWriter, arg1 AppspaceLoginViewData) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AppspaceLogin", arg0, arg1)
}

// AppspaceLogin indicates an expected call of AppspaceLogin
func (mr *MockViewsMockRecorder) AppspaceLogin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppspaceLogin", reflect.TypeOf((*MockViews)(nil).AppspaceLogin), arg0, arg1)
}

// Login mocks base method
func (m *MockViews) Login(arg0 http.ResponseWriter, arg1 LoginViewData) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Login", arg0, arg1)
}

// Login indicates an expected call of Login
func (mr *MockViewsMockRecorder) Login(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockViews)(nil).Login), arg0, arg1)
}

// PrepareTemplates mocks base method
func (m *MockViews) PrepareTemplates() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PrepareTemplates")
}

// PrepareTemplates indicates an expected call of PrepareTemplates
func (mr *MockViewsMockRecorder) PrepareTemplates() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareTemplates", reflect.TypeOf((*MockViews)(nil).PrepareTemplates))
}

// Signup mocks base method
func (m *MockViews) Signup(arg0 http.ResponseWriter, arg1 SignupViewData) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Signup", arg0, arg1)
}

// Signup indicates an expected call of Signup
func (mr *MockViewsMockRecorder) Signup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Signup", reflect.TypeOf((*MockViews)(nil).Signup), arg0, arg1)
}

// UserHome mocks base method
func (m *MockViews) UserHome(arg0 http.ResponseWriter) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UserHome", arg0)
}

// UserHome indicates an expected call of UserHome
func (mr *MockViewsMockRecorder) UserHome(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserHome", reflect.TypeOf((*MockViews)(nil).UserHome), arg0)
}

// MockDbConn is a mock of DbConn interface
type MockDbConn struct {
	ctrl     *gomock.Controller
	recorder *MockDbConnMockRecorder
}

// MockDbConnMockRecorder is the mock recorder for MockDbConn
type MockDbConnMockRecorder struct {
	mock *MockDbConn
}

// NewMockDbConn creates a new mock instance
func NewMockDbConn(ctrl *gomock.Controller) *MockDbConn {
	mock := &MockDbConn{ctrl: ctrl}
	mock.recorder = &MockDbConnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDbConn) EXPECT() *MockDbConnMockRecorder {
	return m.recorder
}

// GetHandle mocks base method
func (m *MockDbConn) GetHandle() *sqlx.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHandle")
	ret0, _ := ret[0].(*sqlx.DB)
	return ret0
}

// GetHandle indicates an expected call of GetHandle
func (mr *MockDbConnMockRecorder) GetHandle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHandle", reflect.TypeOf((*MockDbConn)(nil).GetHandle))
}

// MockAppspaceMetaDB is a mock of AppspaceMetaDB interface
type MockAppspaceMetaDB struct {
	ctrl     *gomock.Controller
	recorder *MockAppspaceMetaDBMockRecorder
}

// MockAppspaceMetaDBMockRecorder is the mock recorder for MockAppspaceMetaDB
type MockAppspaceMetaDBMockRecorder struct {
	mock *MockAppspaceMetaDB
}

// NewMockAppspaceMetaDB creates a new mock instance
func NewMockAppspaceMetaDB(ctrl *gomock.Controller) *MockAppspaceMetaDB {
	mock := &MockAppspaceMetaDB{ctrl: ctrl}
	mock.recorder = &MockAppspaceMetaDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAppspaceMetaDB) EXPECT() *MockAppspaceMetaDBMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockAppspaceMetaDB) Create(arg0 AppspaceID, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockAppspaceMetaDBMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAppspaceMetaDB)(nil).Create), arg0, arg1)
}

// GetConn mocks base method
func (m *MockAppspaceMetaDB) GetConn(arg0 AppspaceID) (DbConn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConn", arg0)
	ret0, _ := ret[0].(DbConn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConn indicates an expected call of GetConn
func (mr *MockAppspaceMetaDBMockRecorder) GetConn(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConn", reflect.TypeOf((*MockAppspaceMetaDB)(nil).GetConn), arg0)
}

// MockAppspaceInfoModel is a mock of AppspaceInfoModel interface
type MockAppspaceInfoModel struct {
	ctrl     *gomock.Controller
	recorder *MockAppspaceInfoModelMockRecorder
}

// MockAppspaceInfoModelMockRecorder is the mock recorder for MockAppspaceInfoModel
type MockAppspaceInfoModelMockRecorder struct {
	mock *MockAppspaceInfoModel
}

// NewMockAppspaceInfoModel creates a new mock instance
func NewMockAppspaceInfoModel(ctrl *gomock.Controller) *MockAppspaceInfoModel {
	mock := &MockAppspaceInfoModel{ctrl: ctrl}
	mock.recorder = &MockAppspaceInfoModelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAppspaceInfoModel) EXPECT() *MockAppspaceInfoModelMockRecorder {
	return m.recorder
}

// GetSchema mocks base method
func (m *MockAppspaceInfoModel) GetSchema() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSchema")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchema indicates an expected call of GetSchema
func (mr *MockAppspaceInfoModelMockRecorder) GetSchema() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchema", reflect.TypeOf((*MockAppspaceInfoModel)(nil).GetSchema))
}

// SetSchema mocks base method
func (m *MockAppspaceInfoModel) SetSchema(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSchema", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetSchema indicates an expected call of SetSchema
func (mr *MockAppspaceInfoModelMockRecorder) SetSchema(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSchema", reflect.TypeOf((*MockAppspaceInfoModel)(nil).SetSchema), arg0)
}

// MockRouteModelV0 is a mock of RouteModelV0 interface
type MockRouteModelV0 struct {
	ctrl     *gomock.Controller
	recorder *MockRouteModelV0MockRecorder
}

// MockRouteModelV0MockRecorder is the mock recorder for MockRouteModelV0
type MockRouteModelV0MockRecorder struct {
	mock *MockRouteModelV0
}

// NewMockRouteModelV0 creates a new mock instance
func NewMockRouteModelV0(ctrl *gomock.Controller) *MockRouteModelV0 {
	mock := &MockRouteModelV0{ctrl: ctrl}
	mock.recorder = &MockRouteModelV0MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRouteModelV0) EXPECT() *MockRouteModelV0MockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockRouteModelV0) Create(arg0 []string, arg1 string, arg2 AppspaceRouteAuth, arg3 AppspaceRouteHandler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockRouteModelV0MockRecorder) Create(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRouteModelV0)(nil).Create), arg0, arg1, arg2, arg3)
}

// Delete mocks base method
func (m *MockRouteModelV0) Delete(arg0 []string, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockRouteModelV0MockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRouteModelV0)(nil).Delete), arg0, arg1)
}

// Get mocks base method
func (m *MockRouteModelV0) Get(arg0 []string, arg1 string) (*[]AppspaceRouteConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*[]AppspaceRouteConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockRouteModelV0MockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRouteModelV0)(nil).Get), arg0, arg1)
}

// GetAll mocks base method
func (m *MockRouteModelV0) GetAll() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetAll")
}

// GetAll indicates an expected call of GetAll
func (mr *MockRouteModelV0MockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockRouteModelV0)(nil).GetAll))
}

// Match mocks base method
func (m *MockRouteModelV0) Match(arg0, arg1 string) (*AppspaceRouteConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Match", arg0, arg1)
	ret0, _ := ret[0].(*AppspaceRouteConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Match indicates an expected call of Match
func (mr *MockRouteModelV0MockRecorder) Match(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Match", reflect.TypeOf((*MockRouteModelV0)(nil).Match), arg0, arg1)
}

// ReverseCommand mocks base method
func (m *MockRouteModelV0) ReverseCommand(arg0 twine.ReceivedMessageI) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReverseCommand", arg0)
}

// ReverseCommand indicates an expected call of ReverseCommand
func (mr *MockRouteModelV0MockRecorder) ReverseCommand(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReverseCommand", reflect.TypeOf((*MockRouteModelV0)(nil).ReverseCommand), arg0)
}

// MockAppspaceRouteModels is a mock of AppspaceRouteModels interface
type MockAppspaceRouteModels struct {
	ctrl     *gomock.Controller
	recorder *MockAppspaceRouteModelsMockRecorder
}

// MockAppspaceRouteModelsMockRecorder is the mock recorder for MockAppspaceRouteModels
type MockAppspaceRouteModelsMockRecorder struct {
	mock *MockAppspaceRouteModels
}

// NewMockAppspaceRouteModels creates a new mock instance
func NewMockAppspaceRouteModels(ctrl *gomock.Controller) *MockAppspaceRouteModels {
	mock := &MockAppspaceRouteModels{ctrl: ctrl}
	mock.recorder = &MockAppspaceRouteModelsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAppspaceRouteModels) EXPECT() *MockAppspaceRouteModelsMockRecorder {
	return m.recorder
}

// GetV0 mocks base method
func (m *MockAppspaceRouteModels) GetV0(arg0 AppspaceID) RouteModelV0 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetV0", arg0)
	ret0, _ := ret[0].(RouteModelV0)
	return ret0
}

// GetV0 indicates an expected call of GetV0
func (mr *MockAppspaceRouteModelsMockRecorder) GetV0(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetV0", reflect.TypeOf((*MockAppspaceRouteModels)(nil).GetV0), arg0)
}

// MockStdInput is a mock of StdInput interface
type MockStdInput struct {
	ctrl     *gomock.Controller
	recorder *MockStdInputMockRecorder
}

// MockStdInputMockRecorder is the mock recorder for MockStdInput
type MockStdInputMockRecorder struct {
	mock *MockStdInput
}

// NewMockStdInput creates a new mock instance
func NewMockStdInput(ctrl *gomock.Controller) *MockStdInput {
	mock := &MockStdInput{ctrl: ctrl}
	mock.recorder = &MockStdInputMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStdInput) EXPECT() *MockStdInputMockRecorder {
	return m.recorder
}

// ReadLine mocks base method
func (m *MockStdInput) ReadLine(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadLine", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// ReadLine indicates an expected call of ReadLine
func (mr *MockStdInputMockRecorder) ReadLine(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadLine", reflect.TypeOf((*MockStdInput)(nil).ReadLine), arg0)
}

// MockMigrationJobModel is a mock of MigrationJobModel interface
type MockMigrationJobModel struct {
	ctrl     *gomock.Controller
	recorder *MockMigrationJobModelMockRecorder
}

// MockMigrationJobModelMockRecorder is the mock recorder for MockMigrationJobModel
type MockMigrationJobModelMockRecorder struct {
	mock *MockMigrationJobModel
}

// NewMockMigrationJobModel creates a new mock instance
func NewMockMigrationJobModel(ctrl *gomock.Controller) *MockMigrationJobModel {
	mock := &MockMigrationJobModel{ctrl: ctrl}
	mock.recorder = &MockMigrationJobModelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMigrationJobModel) EXPECT() *MockMigrationJobModelMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockMigrationJobModel) Create(arg0 UserID, arg1 AppspaceID, arg2 Version, arg3 bool) (*MigrationJob, Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*MigrationJob)
	ret1, _ := ret[1].(Error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockMigrationJobModelMockRecorder) Create(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMigrationJobModel)(nil).Create), arg0, arg1, arg2, arg3)
}

// GetJob mocks base method
func (m *MockMigrationJobModel) GetJob(arg0 JobID) (*MigrationJob, Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJob", arg0)
	ret0, _ := ret[0].(*MigrationJob)
	ret1, _ := ret[1].(Error)
	return ret0, ret1
}

// GetJob indicates an expected call of GetJob
func (mr *MockMigrationJobModelMockRecorder) GetJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJob", reflect.TypeOf((*MockMigrationJobModel)(nil).GetJob), arg0)
}

// GetPending mocks base method
func (m *MockMigrationJobModel) GetPending() ([]*MigrationJob, Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPending")
	ret0, _ := ret[0].([]*MigrationJob)
	ret1, _ := ret[1].(Error)
	return ret0, ret1
}

// GetPending indicates an expected call of GetPending
func (mr *MockMigrationJobModelMockRecorder) GetPending() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPending", reflect.TypeOf((*MockMigrationJobModel)(nil).GetPending))
}

// SetFinished mocks base method
func (m *MockMigrationJobModel) SetFinished(arg0 JobID, arg1 nulltypes.NullString) Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFinished", arg0, arg1)
	ret0, _ := ret[0].(Error)
	return ret0
}

// SetFinished indicates an expected call of SetFinished
func (mr *MockMigrationJobModelMockRecorder) SetFinished(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFinished", reflect.TypeOf((*MockMigrationJobModel)(nil).SetFinished), arg0, arg1)
}

// SetStarted mocks base method
func (m *MockMigrationJobModel) SetStarted(arg0 JobID) (bool, Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStarted", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(Error)
	return ret0, ret1
}

// SetStarted indicates an expected call of SetStarted
func (mr *MockMigrationJobModelMockRecorder) SetStarted(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStarted", reflect.TypeOf((*MockMigrationJobModel)(nil).SetStarted), arg0)
}
