// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/teleclimber/DropServer/cmd/ds-host/appspacedb (interfaces: DbConnI)

// Package appspacedb is a generated GoMock package.
package appspacedb

import (
	gomock "github.com/golang/mock/gomock"
	domain "github.com/teleclimber/DropServer/cmd/ds-host/domain"
	reflect "reflect"
)

// MockDbConnI is a mock of DbConnI interface
type MockDbConnI struct {
	ctrl     *gomock.Controller
	recorder *MockDbConnIMockRecorder
}

// MockDbConnIMockRecorder is the mock recorder for MockDbConnI
type MockDbConnIMockRecorder struct {
	mock *MockDbConnI
}

// NewMockDbConnI creates a new mock instance
func NewMockDbConnI(ctrl *gomock.Controller) *MockDbConnI {
	mock := &MockDbConnI{ctrl: ctrl}
	mock.recorder = &MockDbConnIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDbConnI) EXPECT() *MockDbConnIMockRecorder {
	return m.recorder
}

// close mocks base method
func (m *MockDbConnI) close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "close")
}

// close indicates an expected call of close
func (mr *MockDbConnIMockRecorder) close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "close", reflect.TypeOf((*MockDbConnI)(nil).close))
}

// run mocks base method
func (m *MockDbConnI) run(arg0 *QueryData) ([]byte, domain.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "run", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(domain.Error)
	return ret0, ret1
}

// run indicates an expected call of run
func (mr *MockDbConnIMockRecorder) run(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "run", reflect.TypeOf((*MockDbConnI)(nil).run), arg0)
}
