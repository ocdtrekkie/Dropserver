// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/teleclimber/DropServer/cmd/ds-host/testmocks (interfaces: LoggerI,AppLogger,AppspaceLogger)

// Package testmocks is a generated GoMock package.
package testmocks

import (
	gomock "github.com/golang/mock/gomock"
	domain "github.com/teleclimber/DropServer/cmd/ds-host/domain"
	reflect "reflect"
)

// MockLoggerI is a mock of LoggerI interface
type MockLoggerI struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerIMockRecorder
}

// MockLoggerIMockRecorder is the mock recorder for MockLoggerI
type MockLoggerIMockRecorder struct {
	mock *MockLoggerI
}

// NewMockLoggerI creates a new mock instance
func NewMockLoggerI(ctrl *gomock.Controller) *MockLoggerI {
	mock := &MockLoggerI{ctrl: ctrl}
	mock.recorder = &MockLoggerIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLoggerI) EXPECT() *MockLoggerIMockRecorder {
	return m.recorder
}

// GetLastBytes mocks base method
func (m *MockLoggerI) GetLastBytes(arg0 int64) (domain.LogChunk, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastBytes", arg0)
	ret0, _ := ret[0].(domain.LogChunk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastBytes indicates an expected call of GetLastBytes
func (mr *MockLoggerIMockRecorder) GetLastBytes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastBytes", reflect.TypeOf((*MockLoggerI)(nil).GetLastBytes), arg0)
}

// Log mocks base method
func (m *MockLoggerI) Log(arg0, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Log", arg0, arg1)
}

// Log indicates an expected call of Log
func (mr *MockLoggerIMockRecorder) Log(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*MockLoggerI)(nil).Log), arg0, arg1)
}

// SubscribeEntries mocks base method
func (m *MockLoggerI) SubscribeEntries(arg0 int64) (domain.LogChunk, <-chan string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeEntries", arg0)
	ret0, _ := ret[0].(domain.LogChunk)
	ret1, _ := ret[1].(<-chan string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SubscribeEntries indicates an expected call of SubscribeEntries
func (mr *MockLoggerIMockRecorder) SubscribeEntries(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeEntries", reflect.TypeOf((*MockLoggerI)(nil).SubscribeEntries), arg0)
}

// SubscribeStatus mocks base method
func (m *MockLoggerI) SubscribeStatus() (bool, <-chan bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeStatus")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(<-chan bool)
	return ret0, ret1
}

// SubscribeStatus indicates an expected call of SubscribeStatus
func (mr *MockLoggerIMockRecorder) SubscribeStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeStatus", reflect.TypeOf((*MockLoggerI)(nil).SubscribeStatus))
}

// UnsubscribeEntries mocks base method
func (m *MockLoggerI) UnsubscribeEntries(arg0 <-chan string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UnsubscribeEntries", arg0)
}

// UnsubscribeEntries indicates an expected call of UnsubscribeEntries
func (mr *MockLoggerIMockRecorder) UnsubscribeEntries(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsubscribeEntries", reflect.TypeOf((*MockLoggerI)(nil).UnsubscribeEntries), arg0)
}

// UnsubscribeStatus mocks base method
func (m *MockLoggerI) UnsubscribeStatus(arg0 <-chan bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UnsubscribeStatus", arg0)
}

// UnsubscribeStatus indicates an expected call of UnsubscribeStatus
func (mr *MockLoggerIMockRecorder) UnsubscribeStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsubscribeStatus", reflect.TypeOf((*MockLoggerI)(nil).UnsubscribeStatus), arg0)
}

// MockAppLogger is a mock of AppLogger interface
type MockAppLogger struct {
	ctrl     *gomock.Controller
	recorder *MockAppLoggerMockRecorder
}

// MockAppLoggerMockRecorder is the mock recorder for MockAppLogger
type MockAppLoggerMockRecorder struct {
	mock *MockAppLogger
}

// NewMockAppLogger creates a new mock instance
func NewMockAppLogger(ctrl *gomock.Controller) *MockAppLogger {
	mock := &MockAppLogger{ctrl: ctrl}
	mock.recorder = &MockAppLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAppLogger) EXPECT() *MockAppLoggerMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockAppLogger) Close(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close", arg0)
}

// Close indicates an expected call of Close
func (mr *MockAppLoggerMockRecorder) Close(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockAppLogger)(nil).Close), arg0)
}

// Forget mocks base method
func (m *MockAppLogger) Forget(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Forget", arg0)
}

// Forget indicates an expected call of Forget
func (mr *MockAppLoggerMockRecorder) Forget(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Forget", reflect.TypeOf((*MockAppLogger)(nil).Forget), arg0)
}

// Get mocks base method
func (m *MockAppLogger) Get(arg0 string) domain.LoggerI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(domain.LoggerI)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockAppLoggerMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAppLogger)(nil).Get), arg0)
}

// Log mocks base method
func (m *MockAppLogger) Log(arg0, arg1, arg2 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Log", arg0, arg1, arg2)
}

// Log indicates an expected call of Log
func (mr *MockAppLoggerMockRecorder) Log(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*MockAppLogger)(nil).Log), arg0, arg1, arg2)
}

// Open mocks base method
func (m *MockAppLogger) Open(arg0 string) domain.LoggerI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", arg0)
	ret0, _ := ret[0].(domain.LoggerI)
	return ret0
}

// Open indicates an expected call of Open
func (mr *MockAppLoggerMockRecorder) Open(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockAppLogger)(nil).Open), arg0)
}

// MockAppspaceLogger is a mock of AppspaceLogger interface
type MockAppspaceLogger struct {
	ctrl     *gomock.Controller
	recorder *MockAppspaceLoggerMockRecorder
}

// MockAppspaceLoggerMockRecorder is the mock recorder for MockAppspaceLogger
type MockAppspaceLoggerMockRecorder struct {
	mock *MockAppspaceLogger
}

// NewMockAppspaceLogger creates a new mock instance
func NewMockAppspaceLogger(ctrl *gomock.Controller) *MockAppspaceLogger {
	mock := &MockAppspaceLogger{ctrl: ctrl}
	mock.recorder = &MockAppspaceLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAppspaceLogger) EXPECT() *MockAppspaceLoggerMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockAppspaceLogger) Close(arg0 domain.AppspaceID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close", arg0)
}

// Close indicates an expected call of Close
func (mr *MockAppspaceLoggerMockRecorder) Close(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockAppspaceLogger)(nil).Close), arg0)
}

// Forget mocks base method
func (m *MockAppspaceLogger) Forget(arg0 domain.AppspaceID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Forget", arg0)
}

// Forget indicates an expected call of Forget
func (mr *MockAppspaceLoggerMockRecorder) Forget(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Forget", reflect.TypeOf((*MockAppspaceLogger)(nil).Forget), arg0)
}

// Get mocks base method
func (m *MockAppspaceLogger) Get(arg0 domain.AppspaceID) domain.LoggerI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(domain.LoggerI)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockAppspaceLoggerMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAppspaceLogger)(nil).Get), arg0)
}

// Log mocks base method
func (m *MockAppspaceLogger) Log(arg0 domain.AppspaceID, arg1, arg2 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Log", arg0, arg1, arg2)
}

// Log indicates an expected call of Log
func (mr *MockAppspaceLoggerMockRecorder) Log(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*MockAppspaceLogger)(nil).Log), arg0, arg1, arg2)
}

// Open mocks base method
func (m *MockAppspaceLogger) Open(arg0 domain.AppspaceID) domain.LoggerI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", arg0)
	ret0, _ := ret[0].(domain.LoggerI)
	return ret0
}

// Open indicates an expected call of Open
func (mr *MockAppspaceLoggerMockRecorder) Open(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockAppspaceLogger)(nil).Open), arg0)
}
