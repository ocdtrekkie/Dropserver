// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/teleclimber/DropServer/cmd/ds-host/testmocks (interfaces: DBManager)

// Package testmocks is a generated GoMock package.
package testmocks

import (
	gomock "github.com/golang/mock/gomock"
	domain "github.com/teleclimber/DropServer/cmd/ds-host/domain"
	reflect "reflect"
)

// MockDBManager is a mock of DBManager interface
type MockDBManager struct {
	ctrl     *gomock.Controller
	recorder *MockDBManagerMockRecorder
}

// MockDBManagerMockRecorder is the mock recorder for MockDBManager
type MockDBManagerMockRecorder struct {
	mock *MockDBManager
}

// NewMockDBManager creates a new mock instance
func NewMockDBManager(ctrl *gomock.Controller) *MockDBManager {
	mock := &MockDBManager{ctrl: ctrl}
	mock.recorder = &MockDBManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDBManager) EXPECT() *MockDBManagerMockRecorder {
	return m.recorder
}

// GetHandle mocks base method
func (m *MockDBManager) GetHandle() *domain.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHandle")
	ret0, _ := ret[0].(*domain.DB)
	return ret0
}

// GetHandle indicates an expected call of GetHandle
func (mr *MockDBManagerMockRecorder) GetHandle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHandle", reflect.TypeOf((*MockDBManager)(nil).GetHandle))
}

// GetSchema mocks base method
func (m *MockDBManager) GetSchema() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSchema")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSchema indicates an expected call of GetSchema
func (mr *MockDBManagerMockRecorder) GetSchema() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchema", reflect.TypeOf((*MockDBManager)(nil).GetSchema))
}

// Open mocks base method
func (m *MockDBManager) Open() (*domain.DB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open")
	ret0, _ := ret[0].(*domain.DB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open
func (mr *MockDBManagerMockRecorder) Open() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockDBManager)(nil).Open))
}

// SetSchema mocks base method
func (m *MockDBManager) SetSchema(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSchema", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetSchema indicates an expected call of SetSchema
func (mr *MockDBManagerMockRecorder) SetSchema(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSchema", reflect.TypeOf((*MockDBManager)(nil).SetSchema), arg0)
}
