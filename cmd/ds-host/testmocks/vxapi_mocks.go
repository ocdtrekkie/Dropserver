// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/teleclimber/DropServer/cmd/ds-host/testmocks (interfaces: VXUserModels,V0UserModel)

// Package testmocks is a generated GoMock package.
package testmocks

import (
	gomock "github.com/golang/mock/gomock"
	domain "github.com/teleclimber/DropServer/cmd/ds-host/domain"
	twine "github.com/teleclimber/DropServer/internal/twine"
	reflect "reflect"
)

// MockVXUserModels is a mock of VXUserModels interface
type MockVXUserModels struct {
	ctrl     *gomock.Controller
	recorder *MockVXUserModelsMockRecorder
}

// MockVXUserModelsMockRecorder is the mock recorder for MockVXUserModels
type MockVXUserModelsMockRecorder struct {
	mock *MockVXUserModels
}

// NewMockVXUserModels creates a new mock instance
func NewMockVXUserModels(ctrl *gomock.Controller) *MockVXUserModels {
	mock := &MockVXUserModels{ctrl: ctrl}
	mock.recorder = &MockVXUserModelsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVXUserModels) EXPECT() *MockVXUserModelsMockRecorder {
	return m.recorder
}

// GetV0 mocks base method
func (m *MockVXUserModels) GetV0(arg0 domain.AppspaceID) domain.V0UserModel {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetV0", arg0)
	ret0, _ := ret[0].(domain.V0UserModel)
	return ret0
}

// GetV0 indicates an expected call of GetV0
func (mr *MockVXUserModelsMockRecorder) GetV0(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetV0", reflect.TypeOf((*MockVXUserModels)(nil).GetV0), arg0)
}

// MockV0UserModel is a mock of V0UserModel interface
type MockV0UserModel struct {
	ctrl     *gomock.Controller
	recorder *MockV0UserModelMockRecorder
}

// MockV0UserModelMockRecorder is the mock recorder for MockV0UserModel
type MockV0UserModelMockRecorder struct {
	mock *MockV0UserModel
}

// NewMockV0UserModel creates a new mock instance
func NewMockV0UserModel(ctrl *gomock.Controller) *MockV0UserModel {
	mock := &MockV0UserModel{ctrl: ctrl}
	mock.recorder = &MockV0UserModelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockV0UserModel) EXPECT() *MockV0UserModelMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockV0UserModel) Create(arg0 domain.ProxyID, arg1 string, arg2 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockV0UserModelMockRecorder) Create(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockV0UserModel)(nil).Create), arg0, arg1, arg2)
}

// Delete mocks base method
func (m *MockV0UserModel) Delete(arg0 domain.ProxyID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockV0UserModelMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockV0UserModel)(nil).Delete), arg0)
}

// Get mocks base method
func (m *MockV0UserModel) Get(arg0 domain.ProxyID) (domain.V0User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(domain.V0User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockV0UserModelMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockV0UserModel)(nil).Get), arg0)
}

// GetAll mocks base method
func (m *MockV0UserModel) GetAll() ([]domain.V0User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]domain.V0User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockV0UserModelMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockV0UserModel)(nil).GetAll))
}

// HandleMessage mocks base method
func (m *MockV0UserModel) HandleMessage(arg0 twine.ReceivedMessageI) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleMessage", arg0)
}

// HandleMessage indicates an expected call of HandleMessage
func (mr *MockV0UserModelMockRecorder) HandleMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleMessage", reflect.TypeOf((*MockV0UserModel)(nil).HandleMessage), arg0)
}

// Update mocks base method
func (m *MockV0UserModel) Update(arg0 domain.ProxyID, arg1 string, arg2 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockV0UserModelMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockV0UserModel)(nil).Update), arg0, arg1, arg2)
}
